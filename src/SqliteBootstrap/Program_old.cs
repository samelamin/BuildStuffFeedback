using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Data;
using System.Data.Common;

namespace SqliteBootstrap
{
	class Program
	{
		static void Main(string[] args)
		{
			// A sqlite database is just a file.
			// String fileName = Path.Combine("", "test.db");
			// this is used by the lightstack
			String fileName = Path.Combine(Environment.GetFolderPath(System.Environment.SpecialFolder.MyDocuments), "badges.db");

			// set seed to true to create and populate the table.
			// false to report on it
			bool seed = false;
			// set to false to use the ADO interface and raw SQL.
			// set to true to use Petapoco micro ORM. This is for query only not seeding
			bool useOrm = true;

			if (seed)
				SeedDatabase(fileName);
			else
				if (useOrm)
					QueryDatabaseOrm(fileName);
				else
					QueryDatabase(fileName);
		}
		
		private static void QueryDatabaseOrm(string fileName)
		{
			// create a database "context" object t
			String connectionString = "Data Source=" + fileName;
			DbProviderFactory sqlFactory = new  System.Data.SQLite.SQLiteFactory();
            PetaPoco.Database db =  new PetaPoco.Database(connectionString, sqlFactory);

            // load and array of POCO for Badges
            String sql = "select * from Badges";
            foreach(Badges rec in db.Query<Badges>(sql))
            {
                Console.WriteLine("{0} {1} {2} {3}", rec.Id, rec.Title, rec.Description, rec.Level);
            }
		}

		private static void QueryDatabase(string fileName)
		{
			// Use the Sqlite helper class for convenience.
			// The code it uses is very similar to other ADO.NET code
			SQLiteDatabase db = new SQLiteDatabase(fileName);
			DataTable dt = db.GetDataTable("select * from Badges");
			foreach (DataRow dr in dt.Rows)
			{
				foreach (DataColumn dc in dt.Columns)
				{
					Console.WriteLine("{0} = {1}", dc.ColumnName, dr[dc].ToString());
				}
			}
		}

		private static void SeedDatabase(string fileName)
		{
			// Use the Sqlite helper class for convenience.
			// The code it uses is very similar to other ADO.NET code
            SQLiteDatabase db = new SQLiteDatabase(fileName);

			//
			// Note for smooth working with the orm code make this an integer primary key.
			// the Id will be aliased to an internal 
			// see: ROWID http://www.sqlite.org/lang_createtable.html#rowid
			// 
            String sql = @"
create table [Badges] (
[Id] INTEGER PRIMARY KEY ASC,
[Title] varchar(20) ,
[Description] varchar(255),
[Level] int)";
            db.ExecuteNonQuery(sql);

			sql = @"
insert into Badges ([Title], [Description], [Level]) values ('Site MVP', 'Awarded to members who contribute often and wisely', 2);
";
		
			db.ExecuteNonQuery(sql);
		}
	}

	//
    // PetaPoco to SQL Class for table Badges
	// generated by DbViewSharp http://dbviewsharp.codeplex.com
	// 
	// Note the attributes are probably not all necessary as the table was designed
	// to be ORM-friendly. However they are included as a hint for how to use them
	// when creating an object mapping to a legacy table.
	// See Petapoco documentation for more help. http://www.toptensoftware.com/petapoco/
	// Note: the Id type must be Int64 for self-generating keys in Sqlite.
	// 
    [PetaPoco.TableName("Badges")]
    [PetaPoco.PrimaryKey("Id")]
    public partial class Badges
    {
        [PetaPoco.Column("Id")] public Int64 Id {get; set;}
        [PetaPoco.Column("Title")] public String Title {get; set;}
        [PetaPoco.Column("Description")] public String Description {get; set;}
        [PetaPoco.Column("Level")] public Int32? Level {get; set;}
    }

}
